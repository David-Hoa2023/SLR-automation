This codebase implements a web application designed to automate parts of the Systematic Literature Review (SLR) process. It combines a Python Flask backend for processing and API interactions with a React frontend for the user interface.

Project Purpose
The primary goal of this project is to assist researchers by:

Generating research questions and their purposes based on a given objective.
Creating search strings for querying academic databases.
Fetching research paper details from sources like Elsevier's Scopus.
Filtering fetched papers for relevance.
Answering research questions using the content of selected papers.
Generating summaries such as abstracts, introductions, and conclusions.
Compiling a final summary document in LaTeX format.
Backend (Flask)
The backend is built with Flask and handles the core logic and communication with external APIs.

server.py: This is the main application file that defines all the API endpoints. It orchestrates the calls to various helper modules (agents.py, agents2.py, agents3.py, agents4.py) to perform the tasks listed above. It serves the React application and handles requests for generating research questions, search strings, fetching and filtering papers, answering questions, and generating summaries. It also manages the creation of a LaTeX document from the generated content.
agents.py: This module interfaces with the OpenAI API. Its functions are responsible for:
Generating a specified number of distinct research questions along with their purposes, based on a user-defined research objective.
Summarizing the conclusions of a list of provided research papers.
Generating a summary abstract based on a given prompt.
Generating an introduction summary based on a prompt.
agents2.py: This module uses the OpenAI API to generate concise search strings suitable for academic literature searches, based on the research objective and questions. It also includes a utility to extract the search string from the API's response.
agents3.py: This module is responsible for fetching academic papers. It can:
Use the scholarly library to search for papers, with an option to use free proxies (though the proxy setup is designed to run once per session).
Retrieve details such as title, author, publication year, URL, journal name, DOI, and paper type.
Save the details of fetched papers into a CSV file.
Query the Elsevier Scopus API for papers using a search string, start year, and result limit.
agents4.py: This module handles paper relevance checking and response generation using OpenAI models. Its functions include:
Determining if a paper (based on its title) is relevant to a given search topic using gpt-3.5-turbo.
Filtering a list of papers to include only those deemed relevant by the above function.
Generating answers to research questions by synthesizing information from a provided list of papers, using the gpt-4-turbo-preview model, and citing relevant references.
requirements.txt: This file lists all the Python libraries required for the backend to function, including Flask, requests, scholarly, python-dotenv (for environment variables), and the OpenAI Python library.
templates/latex_template.tex: A LaTeX file that serves as a template for the final generated research summary document. The abstract, introduction, and conclusion sections are populated with content generated by the application.
Frontend (React)
The frontend provides the user interface for interacting with the SLR automation tool.

src/App.jsx: This is the central component of the React application. It manages the application's state and user interactions, including:
Allowing users to input their research objective and specify the number of research questions.
Displaying generated research questions, search strings, and fetched/filtered papers in tables.
Enabling users to edit generated research questions.
Triggering API calls to the Flask backend for all major functionalities (generating questions, search strings, fetching/filtering papers, answering questions, generating summaries).
Providing options to generate and download the final summary as a .tex file.
Utilizing Ant Design components for UI elements like forms, buttons, tables, and notifications.
src/columns.jsx: This file defines the structure (column headers and data mappings) for the various tables displayed in the UI, such as those for research questions, fetched papers, filtered papers, and answers.
src/FullPageLoader.jsx: A component that displays a loading spinner, used to indicate when the application is busy with backend processing (e.g., API calls).
src/main.jsx: The main entry point for the React application, responsible for rendering the App component into the HTML DOM.
src/mysvg.jsx: Defines an SVG icon component, which appears to be used in the application's header.
index.html: The root HTML file that loads the React application.
package.json: Contains metadata about the frontend project, including dependencies like React, ReactDOM, Ant Design, and Vite. It also defines scripts for development (dev), building the project (build), and linting.
vite.config.js: The configuration file for Vite, a modern frontend build tool. It includes settings for the development server, such as proxying API requests from the frontend (running on localhost:5173 during development) to the Flask backend (running on localhost:5000).
src/App.css and src/index.css: These files contain the CSS styles applied to the application for its visual appearance.